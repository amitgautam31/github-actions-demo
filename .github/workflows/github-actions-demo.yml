name: Xata Backup
run-name: ${{ github.actor }} is running Xata Backup üöÄ
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '0 0 * * *'
    - cron: '15 0 * * 1'
    - cron: '25 0 1 * *'
  workflow_dispatch:
env:
  XATA_API_KEY: ${{ secrets.XATA_API_KEY }}
  WORKSPACE_ID: ${{ secrets.XATA_WORKSPACE_ID }}
  DATABASE_NAMES: ${{ secrets.XATA_DATABASE_NAMES }}
  REGION: ${{ secrets.XATA_REGION }}
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

            
            
      - if: github.event_name == 'push'
        name: cleanup previous backup of daily on push
        run: |
          for DB in $DATABASE_NAMES; do
          curl -X DELETE -H 'Authorization: Bearer ${{ secrets.XATA_API_KEY }}' https://$WORKSPACE_ID.$REGION.xata.sh/db/$DB:daily
          done

      - if: github.event.schedule == '15 0 * * 1'
        name: cleanup previous backup of weekly 
        run: |
          for DB in $DATABASE_NAMES; do
          curl -X DELETE -H 'Authorization: Bearer ${{ secrets.XATA_API_KEY }}' https://$WORKSPACE_ID.$REGION.xata.sh/db/$DB:weekly
          done
      
      - if: github.event.schedule == '0 0 * * *'
        name: cleanup previous backup of daily
        run: |
          for DB in $DATABASE_NAMES; do
          curl -X DELETE -H 'Authorization: Bearer ${{ secrets.XATA_API_KEY }}' https://$WORKSPACE_ID.$REGION.xata.sh/db/$DB:daily
          done

      - if: github.event.schedule == '25 0 1 * *'
        name: cleanup previous backup of monthly
        run: |
          for DB in $DATABASE_NAMES; do
          curl -X DELETE -H 'Authorization: Bearer ${{ secrets.XATA_API_KEY }}' https://$WORKSPACE_ID.$REGION.xata.sh/db/$DB:monthly
          done
      
      - name: setup python 
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # install the python version needed
      - run: echo "üêç Setup python completed."

      - name : backup database daily
        if: github.event.schedule == '0 0 * * *'
        run: |
          for DB in $DATABASE_NAMES; do
          response=$(curl -s -w "%{http_code}" -X POST -H "Authorization: Bearer ${{ secrets.XATA_API_KEY }}" https://$WORKSPACE_ID.$REGION.xata.sh/db/$DB:main')
          if [ $response != 404 ]; then
          git clone https://github.com/xataio/xtools.git
          cd xtools/xreplay
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python xreplay.py \
            --from_workspace $WORKSPACE_ID \
            --from_database $DB \
            --from_branch main \
            --from_region $REGION \
            --from_XATA_API_KEY $XATA_API_KEY \
            --to_workspace $WORKSPACE_ID \
            --to_database $DB \
            --to_branch daily \
            --to_region $REGION \
            --to_XATA_API_KEY $XATA_API_KEY \
            --output xata
          fi
          done
            
      - name : backup database weekly
        if: github.event.schedule == '15 0 * * 1'
        run: |
          for DB in $DATABASE_NAMES; do
          response=$(curl -s -w "%{http_code}" -X POST -H "Authorization: Bearer ${{ secrets.XATA_API_KEY }}" https://$WORKSPACE_ID.$REGION.xata.sh/db/$DB:main')
          if [ $response != 404 ]; then
          git clone https://github.com/xataio/xtools.git
          cd xtools/xreplay
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python xreplay.py \
            --from_workspace $WORKSPACE_ID \
            --from_database $DB \
            --from_branch main \
            --from_region $REGION \
            --from_XATA_API_KEY $XATA_API_KEY \
            --to_workspace $WORKSPACE_ID \
            --to_database $DB \
            --to_branch weekly \
            --to_region $REGION \
            --to_XATA_API_KEY $XATA_API_KEY \
            --output xata
          fi
          done
            
      - name : backup database monthly
        if: github.event.schedule == '25 0 1 * *'
        run: |
          for DB in $DATABASE_NAMES; do
          response=$(curl -s -w "%{http_code}" -X POST -H "Authorization: Bearer ${{ secrets.XATA_API_KEY }}" https://$WORKSPACE_ID.$REGION.xata.sh/db/$DB:main')
          if [ $response != 404 ]; then
          git clone https://github.com/xataio/xtools.git
          cd xtools/xreplay
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python xreplay.py \
            --from_workspace $WORKSPACE_ID \
            --from_database $DB \
            --from_branch main \
            --from_region $REGION \
            --from_XATA_API_KEY $XATA_API_KEY \
            --to_workspace $WORKSPACE_ID \
            --to_database $DB \
            --to_branch monthly \
            --to_region $REGION \
            --to_XATA_API_KEY $XATA_API_KEY \
            --output xata
          fi
          done
            
      - name : backup database on push
        if: github.event_name == 'push'
        run: |
          for DB in $DATABASE_NAMES; do
          response=$(curl -s -w "%{http_code}" -X POST -H "Authorization: Bearer ${{ secrets.XATA_API_KEY }}" https://$WORKSPACE_ID.$REGION.xata.sh/db/$DB:main')
          if [ $response != 404 ]; then
          git clone https://github.com/xataio/xtools.git
          cd xtools/xreplay
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python xreplay.py \
            --from_workspace $WORKSPACE_ID \
            --from_database $DB \
            --from_branch main \
            --from_region $REGION \
            --from_XATA_API_KEY $XATA_API_KEY \
            --to_workspace $WORKSPACE_ID \
            --to_database $DB \
            --to_branch daily \
            --to_region $REGION \
            --to_XATA_API_KEY $XATA_API_KEY \
            --output xata
          fi
          done

      - run: echo "üçè This job's status is ${{ job.status }}."

